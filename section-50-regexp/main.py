import re

my_string = "My name Bill."

# result = re.search('Bill', my_string)
# result = re.search(r'B..l', my_string)

all_str_pattern = re.compile(r'^My.*\.$')
print(all_str_pattern.match(my_string))  # <re.Match object; span=(0, 13), match='My name Bill.'>

name_pattern = re.compile(r'B..l')
print(name_pattern.search(my_string))  # <re.Match object; span=(8, 12), match='Bill'>
print(name_pattern.findall(my_string))  # ['Bill']

result = re.search(r'B..l', my_string)

print(type(result))  # <class 're.Match'>
print(result)  # <re.Match object; span=(8, 12), match='Bill'>
print(result.span())  # (8, 12)
print(result.start())  # 8
print(result.end())  # 12

# ============================================================= email check
email_regexp = r"^[a-zA-Z0-9_.]+@[a-zA-Z0-9]+\.[a-zA-Z0-9-.]+$"
email_check_pattern = re.compile(email_regexp)
print(email_check_pattern.fullmatch('op@gmail.com'))

# =============================================================
# Квантификаторы совпадения
# \ - экранирование
# . - любой символ кроме символа перевода строки
# ? - квантификатор совпадения, либо 0 либо одно совпадение
# + - квантификатор совпадения, одно или более совпадение
# * - квантификатор совпадения, 0 или более совпадений

# "Ленивые" квантификаторы
# '*' и '+' - жадные квантификаторы
# '?' - таблетка от жадности -> r'<a.*?>(.*?)</a>'

# Количественные метасимволы
# {m} - не больше не меньше чем 'm' символов
# {m,n} - от 'm' до 'n' символов включительно
# {,n} - от 0 до 'n' символов включительно
# {m,} - от m до безконечности

# ^ - задаёт начало строки r'^ghi' строка начинается с ghi
# $ - задаёт конец строки r'ghi$' - стр заканч на ghi

# [] - класс искомых символов, можно задать набор символов [0-9], [cosmjl] - символ из набора.
# В скобках может быть :
# '^' - означает отрицание (всё кроме того что в []) -> r'[^0-9]'
# '-' - диапазон

# () - групиррование эленментов r'([12][0-9])([0-9]{2})'

# Специальные последовательности символов
# Не забывать экранировать! \? \+ \* \[ \] \{ \} \t \n \f \r

# \d - любое число от 0-9, \d = [0-9]
# \D - не число, \D = r'[^0-9]'
# \s - люой пробельный символ r'[\t\n\f\r]'
# \S - всё кроме пробельныйх символов r'[^\t\n\f\r]'
# \w - бук цифр и символ подчеркивания '_' - r'[a-zA-Z0-9_]'
# \W – противоположность \w r'[^a-zA-Z0-9_]'
# \b - позиция между соседними симв наборов от \w до \W
# \B - противоположность \b

# Модификаторы
# i - игнор регистр букв r'[a-z]i' тоже самое что и r'[a-zA-Z]'
# m - многострочный поиск
# S - однострочный поиск
# x - пропуск пробелов и коментариев в тексте шаблона
# D - тоже что и $ только если строка не заканчивается на \n
# U - ленивость по умолчанию -> '/<a.*?>(.*?)</a>/' тоже что и '/<a.*>(.*)</a>/U'
# g – глобальный поиск по всему документу
